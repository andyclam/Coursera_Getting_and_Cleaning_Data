question <- hw1_data[hw1_data[,1]>31 && hw1_data[,4] >90]
question
question <- hw1_data[hw1_data[,1]>31 & hw1_data[,4] >90]
ozone <- hw1_data[,1]>31
temp <- hw1_data[,4]>90
question <- hw1_data[ozone & temp]
hw1_data[ozone]
question <- hw1_data[ozone & temp,]
question
question <- hw1_data[,ozone & temp]
ozone
question <- hw1_data[,ozone]
question <- hw1_data[ozone,]
question
ozone <- hw1_data[,1]>31
ozone <- hw1_data[hw1_data[,1]>31]
ozone <- hw1_data[hw1_data[,1]>31,]
ozone <- hw1_data[hw1_data[,1]>31, & hw1_data[,4]>90]
ozone <- hw1_data[hw1_data[,1]>31 & hw1_data[,4]>90]
ozone <- hw1_data[hw1_data[,1]>31]
ozone <- hw1_data[,1]>31
ozone
ozone <- hw1_data[!is.na(hw1_data)]
ozone
ozone <- ozone > 31
ozone
install.packages(c("DBI", "devtools", "jsonlite", "mime", "Rcpp", "testthat"))
x <- 10
y <- 6
x+y
a <- "andy"
b<-"10"
x+b
b<-x
x+b
g<-5
x+g
x*g
x/g
multiplier <- function(x, y){
result <- x*y
print(result)
}
?na.rm
?na
?rm
multiplier(2, 4)
division <- function(x, y){
result <- x/y
result
}
division(8, 4)
division(10, 2)
division(2, 5)
thames <- 346
severn <- 354
severn - thames
severn / thames
f <- c(1,2,3,4,5)
class(f)
f+4
g <- f / 2
f + g
multiplier(f, 2)
1:20
seq(1:20, 2)
seq(from = 0, to = 10, by = 2.5)
?seq
?seq_along
seq(from = 10, by = 3, length = 5)
mydata <- data.frame(x = 101:110, y = seq(from = 51, by = 2.5, length = 10))
View(mydata)
?data.frame
mydata <- data.frame(x = 101:109, y = seq(from = 51, by = 2.5, length = 10))
m <- data.frame(f, d)
d <- c(1,4,10,16,18)
m <- data.frame(f, d)
m
mydata[2,2]
mydata[3,2]
mydata[,2]
mydata[,1]
as.data.frame(mydata[,1])
data.frame(mydata[,1])
?as
as.data.frame(mydata[6:10, 2])
as.data.frame(mydata[6:10, 1])
mydata$x[4]
as.data.frame(mydata$x)
mydata$x
mydata$x[c(6,10)]
mydata$x[-5]
new_array <- seq(from = 100, length = 50, by = 7.505)
lgenth(new_array)
length(new_array)
new_array[lgenth(new_array)]
new_array[length(new_array)]
last(new_array, 1)
tail(new_array, 1)
sunspot <- data.frame(Year = 1700:1700+length(sunspot.year), sunspot.year)
View(sunspot)
sunspot <- data.frame(Year = 1700:(1700+length(sunspot.year)), sunspot.year)
sunspot <- data.frame(Year = 1700:1988, sunspot.year)
View(sunspot)
sunspot <- data.frame(Year = 1700:1988, Sunspot.Count = sunspot.year)
View(sunspot)
sunspot <- data.frame(Year = 1700:(1700+length(sunspot.year)-1), sunspot.year)
View(sunspot)
head(sunspot)
tail(sunspot)
?head
any(sunspot <= 0)
which(sunspot <= 0)
which(sunspot[,2] <= 0)
which(sunspot[,2] <= 0)
any(sunspot[,2] <= 0)
sunspot_int <- round(sunspot[,2], 0)
View(sunspot_int)
sunspot_int <- round(sunspot, 0)
View(sunspot_int)
any(sunspot_int[,2]<0)
any(sunspot_int[,1]<1700)
any(sunspot_int[,1]<1700 | sunspot_int[,1]>1988)
sunspot_int[which(sunspot_int <= 1700)]
sunspot_int[which(sunspot_int[,1] <= 1700)]
which(sunspot_int[,2] == 67)
sunspot_int[which(sunspot_int[,2] == 67)]
sunspot_int[c(which(sunspot_int[,2] == 67))]
sunspot_int[which(sunspot_int[,2] == 67)]
sunspot_int[which(sunspot_int[,2] == 67)]
which(sunspot_int[,2] == 67)
sunspot[c(which(sunspot_int[,2] == 67)),]
sunspot_int[c(which(sunspot_int[,2] == 67)),]
sunspot_int[c(which(sunspot_int[,2] == 67)),1]
as.data.frame(sunspot_int[c(which(sunspot_int[,2] == 67)),1])
data.frame(sunspot_int[c(which(sunspot_int[,2] == 67)),1])
meanCol(sunspot_int[,2])
mean(sunspot_int[,2])
summary(sunspot_int)
class(as.data.frame(sunspot_int[c(which(sunspot_int[,2] == 67)),1]))
head(airquality)
?dataset
data()
mean(airquality$Solar.R)
mean(airquality$Solar.R[!is.na(airquality$Solar.R)))
mean(airquality$Solar.R[!is.na(airquality$Solar.R))
mean(airquality$Solar.R[!is.na(airquality$Solar.R)])
any(is.na(airquality))
mean(airquality$Solar.R[!is.na(airquality$Solar.R)])
mean(airquality[,2], na.rm=TURE)
mean(airquality[,2], na.rm=TRUE)
?na
?rm
complete(airquality)
air_clean <-  na.omit(airquality)
View(air_clean)
head(air_clean)
summart(air_clean)
summary(air_clean)
summart(airquality)
summary(airquality)
which(airquality[,2]==NA)
which(is.na(airquality[,2]))
airquality[which(is.na(airquality[,2])),]
?complete
??complete
summary(airquality$Solar.R)
a <- 10
b < - 11
b <- 11
if(a < b){
print(TRUE)
}
if(a<b){
print(TRUE)
else{
if(a<b){
print(TRUE)
else
if(a<b){
print("a is less than b")}
a <- 12
if(a<b){
print("a is less than b")}
if(a<b){
print("a is less than b")}
if(a<b){
print("a is less than b")
else(
if(a<b){
a
}
a <- 1
if(a<b){
print("a is less than b")
}
?paste
if(a<b){
paste(a, "is less than", b, sep= " ")
}
paste(1:12, sep = " ")
class(paste(1:12, sep = " "))
sum(1:3)
sqrt(50)
if(sum(1:3) >= sqrt(50)){
print("statement is true")
}else{
print("statement is false")}
source('~/GitHub/R-Programming/complete.R', echo=TRUE)
?source
ifelse(a<b, "Statement is true", "Statement is false")
?ifelse
barplot(VADeaths)
View(VADeaths)
summary(VADeaths)
plot(air_clean)
?plot
plot(air_clean)
plot(air_clean$Wind, air_clean$Solar.R)
plot(air_clean$Wind, air_clean$Solar.R, pch = 16)
?plot
plot(air_clean$Wind, air_clean$Solar.R, pch = 10)
plot(air_clean$Wind, air_clean$Solar.R, pch = 1)
plot(air_clean$Wind, air_clean$Solar.R, pch = 18)
plot(air_clean$Wind, air_clean$Solar.R, pch = 10, cex = 1)
plot(air_clean$Wind, air_clean$Solar.R, pch = 10, cex = 2)
plot(air_clean$Wind, air_clean$Solar.R, pch = 10, cex = 0.5)
plot(air_clean$Wind, air_clean$Solar.R, pch = 10, cex = 0.5, color = green)
plot(air_clean$Wind, air_clean$Solar.R, pch = 10, cex = 0.5, color = "green")
plot(air_clean$Wind, air_clean$Solar.R, pch = 10, cex = 0.5, col = "green")
plot(air_clean$Wind, air_clean$Solar.R, pch = 10, cex = 0.5, col = "blue")
?plot
abline(lm(air_clean$Wind~air_clean$Solar.R))
?abline
abline(lm(air_clean$Wind,air_clean$Solar.R))
abline(lm(air_clean$Solar.R~air_clean$Wind))
?lm
View(airquality)
?mean
mean(airquality$Ozone, na.rm = TRUE)
any(is.na(airquality$Temp))
?ls
rm(ls())
rm(list = ls())
?abline
which(airquality$Wind < 4)
count(which(airquality$Wind < 4))
??count
length(which(airquality$Wind < 4))
?any
?na
length((airquality$Wind < 4)
)
length(airquality$Wind < 4)
length(airquality$Wind > 4)
length(airquality$Wind >= 4)
length(which(airquality$Wind < 4))
length(which(airquality$Wind <= 4))
nrow(airquality)
States <- read.table("~/GitHub/Coursera_R_Programming/Programming Assignment 3/States.csv", quote="\"")
View(States)
set.seed(1)
rpois(5,2)
?dpois
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
e
x
y
plot(y, x)
plot(y, x, e)
plot(x, y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
?qpois
plot(x, y)
> set.seed(10)
> x <- rbinom(10, 10, 0.5)
> e <- rnorm(10, 0, 20)
> y <- 0.5 + 2 * x + e
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
set.seed(9)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
set.seed(8)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
plot(y, x)
x <- seq(0, 6, 0.4)
x
y <- read.csv("C:/Users/Andy/Desktop/y.txt", header=FALSE)
View(y)
y <- y
y <- vector(y)
y <- matrix(y)
model <- lm(y~x)
y <- as.Double(y)
?as
y <- as.Integer(y)
y <- as.integer(y)
y <- read.csv("C:/Users/Andy/Desktop/y.txt", header=FALSE)
View(y)
y1 <- as.double(y)
model <- lm(y~x)
model <- lm(y1~x)
model
summary(model)
plot(x, y1)
abline(model)
coefs <- coef(model)
coefs
?abline
?I
head(women)
sunspot
data(sunspot)
class(coefs)
summary(coefs)
coefs(3)
?knn
??knn
?dist
?submet
?subset
?factor
library(class)
?knn
data(airquality)
head(airquality)
plot(airquality$Wind, airquality$Ozone)
?lm
true_error <- rnorm( 1000,0,2)
true_beta_0 <- 1.1
true_beta_1 <- -8.2
y <- true_beta_0 + true_beta_1* x_1 + true_error
hist( y) # plot p( y)
x_1 <- rnorm( 1000,5,7) # from a normal distribution simulate # 1000 values with a mean of 5 and # standard deviation of 7
hist( x_1, col ="grey") # plot p( x)
true_error <- rnorm( 1000,0,2)
true_beta_0 <- 1.1
true_beta_1 <- -8.2
y <- true_beta_0 + true_beta_1* x_1 + true_error
hist( y) # plot p( y)
lm(airquality$Ozone~airquality$Wind)
summary(lm(formula = airquality$Ozone ~ airquality$Wind))
?residual
lm(airquality$Ozone~(airquality$Wind)^2)
lm(airquality$Ozone~asis(airquality$Wind)^2)
?is
?as
lm(airquality$Ozone~as(airquality$Wind^2))
lm(airquality$Ozone~airquality$Wind)
coef <- lm(airquality$Ozone~airquality$Wind)
coef[1]
coef[2]
head(women)
women
plot(women$height, women$weight)
women_lr<-lm(women$weight~women$height)
women_lr
women_coefs<-coef(women_lr)
women_coefs
women_coefs[1]
women_coefs[2]
?coef
abline(coefs_demo[1], coefs_demo[2])
??knn
library(class)
?knn
# Class A cases
A1=c(0,0)
A2=c(1,1)
A3=c(2,2)
# Class B cases
B1=c(6,6)
B2=c(5.5,7)
B3=c(6.5,5)
# Build the classification matrix
train=rbind(A1,A2,A3, B1,B2,B3)
# Class labels vector (attached to each class instance)
cl=factor(c(rep("A",3),rep("B",3)))
# The object to be classified
test=c(4, 4)
# Load the class package that holds the knn() function
library(class)
# call knn() and get its summary
summary(knn(train, test, cl, k = 1))
- See more at: http://blog.webagesolutions.com/archives/1164#sthash.khwC4jRt.dpuf
cl
class(cl)
summary(cl)
knn(train, test, cl, k = 1)
?kmeans
?coef
class(iris)
iris
library(iris)
data(iris)
head(iris)
model <- lm(Sepal.Width ~ Sepal.Length)
model <- lm(Sepal$Width ~ Sepal$Length)
model <- lm(iris$Sepal.Width ~ iris$Sepal.Length)
lm
model
model[2]
summary(model)
plot(iris$Sepal.Length, iris$Sepal.Width)
abline(model)
abline(lm(iris$Sepal.Width ~ iris$Sepal.Length))
?knn
?coef
model <- lm(iris$Sepal.Width ~ iris$Sepal.Length)
coef(model)
summary(model)
model[2]
model[3]
?lm
library(xlsx)
?read.xlsx
setwd("~/GitHub/Getting_and_Cleaning_Data/Quiz1")
read.xlsx("Q3.xlsx")
read.xlsx("Q3.xlsx", 1)
mydata <- read.xlsx("getdata-data-DATA.gov_NGAP.xlsx", 1)
dat <- mydata[18:23, 7:15]
sum(dat$Zip*dat$Ext,na.rm=T)
library(xml)
install.packages('xml')
install.packages('XML')
library('XML')
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", "./Q4.xml")
mydata <- read.xml("Q4.xml")
mydata <- xmlTreeParse("Q4.xml")
mydata
?xml
xpathSApply(rootNode, "//zipcode", xmlValue)
rootName <- xmlRoot(mydata)
xpathSApply(rootNode, "//zipcode", xmlValue)
rootNode <- xmlRoot(mydata)
xpathSApply(rootNode, "//zipcode", xmlValue)
xmlSApply(rootNode, "zipcode")
code <- xpathSApply(mydata, "zipcode", xmlValue)
doc <- xmlTreeParse(mydata, useInternal = TRUE)
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal = TRUE)
fileUrl <- https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
doc <- xmlTreeParse(fileUrl, useInternal = TRUE)
doc <- xmlTreeParse("getdata-data-restauraunts.xml", useInternal = TRUE)
doc <- xmlTreeParse("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal = TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]][[1]][4]
rootNode[[1]][[1]]$Zipcode
rootNode[[1]][[1]]$zipcode
xmlSApply(rootNode, "zipcode")
node[@zipcode = '21231']
xpathSApply(rootNode, "//zipcode", xmlValue)
zips <- xpathSApply(rootNode, "//zipcode", xmlValue)
count(zips == "21231")
sum(zips == "21231")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", "Q5.csv")
mydata <- read.csv("Q5.csv")
?fread
??fread
library(data.table)
install.packages("data.table")
library(data.table)
?fread
DT <- fread("Q5.csv")
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
mydata<-read.xlsx("Q3.xlsx")
mydata<-read.xlsx("Q3.xlsx", 1)
dat<-read.xlsx("Q3.xlsx", 1)
dat <- dat[,7:15]
dat <- dat[18:23,]
sum(dat$Zip*dat$Ext,na.rm=T)
dat
dat$Zip
head(mydata)
dat<-read.xlsx("Q3.xlsx", 1)
mydata<-read.xlsx("Q3.xlsx", 1)
dat <- mydata[18:23,]
dat
View(dat)
mydata<-read.xlsx("Q3.xlsx", 1, header = FALSE)
dat <- mydata[18:23,]
dat
dat <- mydata[18:23, 7:15]
dat
sum(dat$Zip*dat$Ext,na.rm=T)
dat <- read.xlsx(dat, header = TRUE)
dat <- data.frame(dat, header = TRUE)
dat
dat$Zip
colIndex = 7:15
rowIndex = 18:23
dat <- read.xlsx("Q3.xlsx", 1, colIndex = colIndex, rowIndex = rowIndex)
dat
sum(dat$Zip*dat$Ext,na.rm=T)
